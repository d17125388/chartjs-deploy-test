{"version":3,"sources":["components/Chart.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Chart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","chartData","requestData","_this2","axios","get","then","res","data","newChartData","labels","getLabels","datasets","dataAsPercentages","backgroundColor","setState","forceUpdate","react_default","a","createElement","className","es","options","title","display","text","fontSize","legend","position","obj","percentageArray","total","key","percentage","push","Math","round","Component","App","components_Chart","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"6NA6FeA,cArFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,UAAW,GACXC,YAAa,IAJET,mFAQC,IAAAU,EAAAP,KAElBQ,IAAMC,IAbG,QAcNC,KAAK,SAAAC,GACJ,IAAIC,EAAOD,EAAIC,KAIXC,EAAe,CACjBC,OAJWP,EAAKQ,UAAUH,GAK1BI,SAAU,CACR,CACEJ,KANkBL,EAAKU,kBAAkBL,GAOzCM,gBAAiB,aAIvBX,EAAKY,SAAS,SAACf,EAAOR,GAAR,MAAmB,CAC/BS,UAAWQ,IACT,WACFN,EAAKa,mDAOX,OAAIpB,KAAKI,MAAMC,UAAUW,SAErBK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEb,KAAQZ,KAAKI,MAAMC,UACnBqB,QAAW,CACTC,MAAO,CACLC,SAAS,EACTC,KAAM,8BACNC,SAAU,IAEZC,OAAQ,CACNH,SAAS,EACTI,SAAU,aAOdX,EAAAC,EAAAC,cAAA,mEAKQU,GAChB,IAAIC,EAAkB,GAClBC,EAAQ,EACZ,IAAK,IAAIC,KAAOH,EACdE,GAASF,EAAIG,GAEf,IAAK,IAAIA,KAAOH,EAAK,CACnB,IAAII,EAAaJ,EAAIG,GAAOD,EAAQ,IACpCD,EAAgBI,KAAKC,KAAKC,MAAmB,GAAbH,GAAmB,IAErD,OAAOH,oCAGCD,GACR,IAAInB,EAAS,GACb,IAAK,IAAIsB,KAAOH,EACdnB,EAAOwB,KAAKF,GAEd,OAAOtB,SA/ES2B,aCQLC,mLARX,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACoB,EAAD,cAJUF,aCKEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,KAAK,SAAA+C,GACjCA,EAAaC,6FE3HnBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.e8688075.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport {HorizontalBar} from 'react-chartjs-2';\r\n\r\n// const API_URL = `http://localhost:5000/api`;\r\nconst API_URL = `/api`;\r\n\r\nclass Chart extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      chartData: {},\r\n      requestData: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // axios.get(`http://slowwly.robertomurray.co.uk/delay/3000/url/https://reqres.in/api/unknown`)\r\n    axios.get(API_URL)\r\n      .then(res => {\r\n        let data = res.data;\r\n        let labels = this.getLabels(data);\r\n        let dataAsPercentages = this.dataAsPercentages(data);\r\n\r\n        let newChartData = {\r\n          labels: labels,\r\n          datasets: [\r\n            {\r\n              data: dataAsPercentages,\r\n              backgroundColor: '#ffb935'\r\n            }\r\n          ]\r\n        };\r\n        this.setState((state, props) => ({\r\n          chartData: newChartData\r\n        }), () => {\r\n          this.forceUpdate();\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.chartData.datasets) {\r\n      return (\r\n        <div className=\"chart\">\r\n          <HorizontalBar\r\n            data = {this.state.chartData}\r\n            options = {{\r\n              title: {\r\n                display: true,\r\n                text: 'Years Coding Professionally',\r\n                fontSize: 25\r\n              },\r\n              legend: {\r\n                display: false,\r\n                position: 'right'\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    return (<div>Loading...</div>)\r\n\r\n\r\n  }\r\n\r\n  dataAsPercentages(obj) {\r\n    let percentageArray = []\r\n    let total = 0;\r\n    for (let key in obj) {\r\n      total += obj[key]\r\n    }\r\n    for (let key in obj) {\r\n      let percentage = obj[key] / total * 100;\r\n      percentageArray.push(Math.round(percentage * 10) / 10)\r\n    }\r\n    return percentageArray;\r\n  }\r\n\r\n  getLabels(obj) {\r\n    let labels = []\r\n    for (let key in obj) {\r\n      labels.push(key);\r\n    }\r\n    return labels\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\nexport default Chart;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Chart from './components/Chart';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Chart></Chart>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}